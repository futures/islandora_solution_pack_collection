<?php

/**
 * @file
 *   Provides functionality for creating/managing/deleting/viewing collections.
 */

// Constants.
define('CREATE_CHILD_COLLECTION', 'create child collection');
define('MANAGE_COLLECTION_POLICY', 'manage collection policy');
define('MIGRATE_COLLECTION_MEMBERS', 'migrate collection members');

/**
 * Implements hook_menu().
 */
function islandora_basic_collection_menu() {
  $ingest_object_menu_item = array(
    'title' => 'Add an object to this Collection',
    'page callback' => 'islandora_basic_collection_ingest_action',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/ingest.form.inc',
    'access callback' => 'islandora_basic_collection_ingest_access',
    'access arguments' => array(2),
  );
  return array(
    'admin/islandora/basic_collection' => array(
      'title' => 'Core Collection',
      'description' => 'Configure the core Islandora collection functionality.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_basic_collection_admin'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/object/%islandora_object/manage/collection' => array(
      'title' => 'Collection',
      'page callback' => 'islandora_basic_collection_manage_object',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/manage_collection.inc',
      'access callback' => 'islandora_basic_collection_manage_access',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/manage/collection/ingest' => $ingest_object_menu_item,
    'islandora/object/%islandora_object/manage/overview/ingest' => $ingest_object_menu_item,
  );
}

/**
 * Implements hook_menu_alter().
 */
function islandora_basic_collection_menu_alter(&$items) {
  // We want to add more permissions to the access arguments for the manage tab.
  $current_access_arguments = $items['islandora/object/%islandora_object/manage']['access arguments'][0];
  $new_access_arguments = array(
    CREATE_CHILD_COLLECTION,
    MANAGE_COLLECTION_POLICY,
    MIGRATE_COLLECTION_MEMBERS,
  );
  $new_access_arguments = array_merge($current_access_arguments, $new_access_arguments);
  $items['islandora/object/%islandora_object/manage']['access arguments'] = array($new_access_arguments, 2);
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_basic_collection_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_basic_collection');
  // Collection Content Model.
  $collection_content_model = $connection->repository->constructObject('islandora:collectionCModel');
  $collection_content_model->owner = 'fedoraAdmin';
  $collection_content_model->label = 'Islandora Collection Content Model';
  $collection_content_model->models = 'fedora-system:ContentModel-3.0';
  // ISLANDORACM Datastream.
  $datastream = $collection_content_model->constructDatastream('ISLANDORACM', 'X');
  $datastream->label = 'Islandora content model';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_content_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $collection_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_basic_collection_ds_composite_model.xml", FALSE);
  $collection_content_model->ingestDatastream($datastream);
  return array(
    'islandora_basic_collection' => array(
      'title' => 'Islandora basic collection',
      'objects' => array(
        $collection_content_model,
      ),
    ),
  );
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param FedoraObject $object
 *   The object being managed.
 *
 * @return bool
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_basic_collection_manage_access($object = NULL) {
  if (!is_object($object) || !in_array('islandora:collectionCModel', $object->models)) {
    return FALSE;
  }
  return islandora_basic_collection_ingest_child_collection_access($object) ||
    user_access(MANAGE_COLLECTION_POLICY) ||
    user_access(MIGRATE_COLLECTION_MEMBERS) ||
    islandora_basic_collection_ingest_access($object);
}

/**
 * Checks if the user has access to ingest a new child collection.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function islandora_basic_collection_ingest_child_collection_access($object = NULL) {
  $user_access = user_access(FEDORA_INGEST) && user_access(CREATE_CHILD_COLLECTION);
  $is_collection = is_object($object) && in_array('islandora:collectionCModel', $object->models);
  $has_policy = isset($object['COLLECTION_POLICY']);
  if (!($user_access && $is_collection && $has_policy)) {
    return FALSE;
  }
  $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
  $policy_content_models = $policy->getContentModels();
  return isset($policy_content_models['islandora:collectionCModel']);
}

/**
 * Ingest action access callback.
 *
 * @param FedoraObject $object
 *   Collection object to check if ingestion is possible.
 */
function islandora_basic_collection_ingest_access($object = NULL) {
  if (!is_object($object) || !user_access(FEDORA_INGEST)) {
    return FALSE;
  }
  // Reduce need to validate to once per object, as this if often called more
  // than once per request.
  static $checked_objects = array();
  if (!in_array($object->id, array_keys($checked_objects))) {
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    module_load_include('inc', 'islandora_basic_collection', 'includes/ingest.form');
    // Assume ingest is denied.
    $checked_objects[$object->id] = FALSE;
    $configuration = islandora_basic_collection_get_ingest_configuration($object);
    if ($configuration) {
      $steps = islandora_ingest_get_approximate_steps($configuration);
      // Only if one or more steps are defined should we ingest.
      $checked_objects[$object->id] = count($steps) > 0;
    }
  }
  return $checked_objects[$object->id];
}

/**
 * Implements hook_theme().
 */
function islandora_basic_collection_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_basic_collection' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection',
      'pattern' => 'islandora_basic_collection__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_grid' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-grid',
      'pattern' => 'islandora_basic_collection_grid__',
      'variables' => array('islandora_object' => NULL, 'collection_results' => NULL),
    ),
    'islandora_basic_collection_wrapper' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-basic-collection-wrapper',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_policy_management_table' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'table',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_view_object(FedoraObject $object) {
  $output = theme('islandora_basic_collection_wrapper', array('islandora_object' => $object));
  return array('Collection View' => $output);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_overview_object(FedoraObject $object) {
  $rows = array();
  $members = islandora_basic_collection_get_objects($object);
  foreach ($members as $member) {
    $content_model = islandora_object_load($member['content']['value']);
    if (isset($rows[$content_model->id])) {
      $rows[$content_model->id][1]++;
    }
    else {
      $link = l($content_model->label, "islandora/object/{$content_model->id}");
      $rows[$content_model->id] = array($link, 1);
    }
  }
  $content = array(
    'total' => array('#markup' => t('Total members: %total', array('%total' => count($members)))),
    'table' => array(
      '#theme' => 'table',
      '#header' => array('type' => array('data' => t('Type')), 'count' => array('data' => t('Count'))),
      '#rows' => $rows,
      '#empty' => t('Collection is empty.')),
  );
  return array(
    'collection' => drupal_render($content),
  );
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_basic_collection_islandora_overview_object(FedoraObject $object) {
  module_load_include('inc', 'islandora_basic_collection', 'includes/utilities');
  if (!in_array('islandora:collectionCModel', $object->models)) {
    $map_to_row = function($o) {
      $o = islandora_object_load($o);
      return array(l($o->label, "islandora/object/{$o->id}"));
    };
    $pids = islandora_basic_collection_get_parent_pids($object);
    $rows = array_map($map_to_row, $pids);
    return array(
      'collection' => theme('table', array('header' => array(t('Parent Collections')), 'rows' => $rows, 'empty' => t('No parent collections'))),
    );
  }
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 *
 * @param FedoraObject $object
 *   The collection object whose members will be fetched.
 * @param int $page_number
 *   The page number in the query for members.
 * @param int $page_size
 *   The number of results per page page from the query for members.
 *
 * @return array
 *   Query results.
 */
function islandora_basic_collection_get_objects(FedoraObject $object, $page_number = 1, $page_size = 5) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $query = 'SELECT $object $title $content
     FROM <#ri>
     WHERE {
            $object $collection_predicate <info:fedora/' . $object->id . '> ;
                   <fedora-model:label> $title ;
                   <fedora-model:hasModel> $content ;
                   <fedora-model:state> <fedora-model:Active> .
            FILTER(sameTerm($collection_predicate, <fedora-rels-ext:isMemberOfCollection>) || sameTerm($collection_predicate, <fedora-rels-ext:isMemberOf>))
            FILTER (!sameTerm($content, <info:fedora/fedora-system:FedoraObject-3.0>))';
  $enforced = variable_get('islandora_namespace_restriction_enforced', FALSE);
  if ($enforced) {
    $namespace_array = explode(' ', variable_get('islandora_pids_allowed', 'default: demo: changeme: ilives: islandora-book: books: newspapers: '));
    $namespace_array = array_map('islandora_get_namespace', $namespace_array);
    $namespace_array = array_filter($namespace_array, 'trim');
    $namespace_sparql = implode('|', $namespace_array);
    $query .= 'FILTER(regex(str(?object), "info:fedora/(' . $namespace_sparql . '):"))';
  }
  $query .= '} ORDER BY $title';
  $query_array = array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
    // Seems as though this is ignored completely.
    'page_size' => $page_size,
    'page_number' => $page_number,
  );
  drupal_alter('islandora_basic_collection_query', $query_array);
  try {
    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);
  } catch (Exception $e) {
    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $object->id)), 'error');
    return array();
  }
  return $results;
}

/**
 * Get all existing collections.
 *
 * @return array
 *   An associative array containing all the known collections:
 *   - pid: The PID of the collection.
 *    - pid: The PID of the collection.
 *    - label: The label of the collection.
 */
function islandora_basic_collection_get_collections() {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $tuque = islandora_get_tuque_connection();
  $query = 'select $object $label from <#ri> where (
            $object <fedora-model:label> $label and
            $object <info:fedora/fedora-system:def/model#hasModel> <info:fedora/islandora:collectionCModel> and
            $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
            order by $label';
  $results = $tuque->repository->ri->itqlQuery($query, 'unlimited');
  $collections = array();
  foreach ($results as $result) {
    $pid = $result['object']['value'];
    if (islandora_namespace_accessible($pid)) {
      $collections[$pid] = array(
        'pid' => $pid,
        'label' => $result['label']['value'],
      );
    }
  }
  return $collections;
}
/**
 * alters query to use SQL2 if repository version is = or greater then 4.0
 * 
 * @param array $query_array
 */
function islandora_basic_collection_islandora_basic_collection_query_alter(&$query_array) {
  //no concept of labels or relationships yet in fcrepo4.
  module_load_include('inc', 'islandora', 'utilities');
  $info = islandora_describe_repository();
  if ($info['repositoryVersion'] >= 4.0) {
    $query_array['query'] = 'Select "jcr:name" From "nt:folder"';
    $query_array['type'] = 'SQL2';
  }
}

/**
 * Implements hook_islandora_undeletable_datastreams().
 */
function islandora_basic_collection_islandora_undeletable_datastreams($models) {
  if (in_array('islandora:collectionCModel', $models)) {
    if (variable_get('islandora_basic_collection_disable_collection_policy_delete', TRUE)) {
      return array('COLLECTION_POLICY');
    }
  }
}

/**
 * Implements hook_permission().
 */
function islandora_basic_collection_permission() {
  return array(
    CREATE_CHILD_COLLECTION => array(
      'title' => t('Create child collections'),
      'description' => t('Create new collections within an existing collection.'),
    ),
    MANAGE_COLLECTION_POLICY => array(
      'title' => t('Manage collection policies'),
      'description' => t('Define which content models are available for each collection.'),
    ),
    MIGRATE_COLLECTION_MEMBERS => array(
      'title' => t('Migrate collection members'),
      'description' => t('Move objects from one collection to another.'),
    ),
  );
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_basic_collection_form_islandora_object_properties_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:collectionCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Collection');
  }
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_basic_collection_form_islandora_delete_object_form_alter(array &$form, array &$form_state) {
  $object = $form_state['object'];
  if (in_array('islandora:collectionCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the collection object and all its child objects. Child objects currently shared with other collections will not be deleted. This action cannot be undone.');
    $form['#submit'] = array('islandora_basic_collection_islandora_delete_object_form_delete_pages_submit');
  }
}

/**
 * Delete all the page objects related to the collection object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_basic_collection_islandora_delete_object_form_delete_pages_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_basic_collection', 'includes/batch');
  batch_set(islandora_basic_collection_delete_children_batch($form_state['object']));
  // Called from within this submit handler rather than from the Drupal Form API
  // as we need the object to exist to generate the pages and if we run this.
  // batch operation from a submit handler any submit handlers to be called
  // afterwards will not get called, which is a bug/feature of the Form API.
  islandora_delete_object_form_submit($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alters islandora_repository_admin.
 * Adds in a setting for site-wide UUID generation on ingest.
 */
function islandora_basic_collection_form_islandora_repository_admin_alter(&$form, &$form_state) {
  $form['islandora_tabs']['islandora_general']['islandora_basic_collection_generate_uuid'] = array(
    '#type' => 'checkbox',
    '#title' => t('UUID PID Generation'),
    '#default_value' => variable_get('islandora_basic_collection_generate_uuid', FALSE),
    '#description' => t('Generate Fedora object PIDs with v4 UUIDs.'),
  );
}